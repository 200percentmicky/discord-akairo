"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../src/index");
const util_1 = __importDefault(require("util"));
class EvalCommand extends index_1.Command {
    constructor() {
        super("eval", {
            aliases: ["eval", "e"],
            category: "owner",
            ownerOnly: true,
            quoted: false,
            args: [
                {
                    id: "code",
                    match: "content"
                }
            ]
        });
    }
    async exec(message, { code }) {
        if (!code)
            return message.util.reply("No code provided!");
        const evaled = {};
        const logs = [];
        const token = this.client.token.split("").join("[^]{0,2}");
        const rev = this.client.token.split("").reverse().join("[^]{0,2}");
        const tokenRegex = new RegExp(`${token}|${rev}`, "g");
        const cb = "```";
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const print = (...a) => {
            const cleaned = a.map(obj => {
                // @ts-expect-error
                if (typeof o !== "string")
                    obj = util_1.default.inspect(obj, { depth: 1 });
                return obj.replace(tokenRegex, "[TOKEN]");
            });
            if (!evaled.output) {
                logs.push(...cleaned);
                return;
            }
            evaled.output += evaled.output.endsWith("\n") ? cleaned.join(" ") : `\n${cleaned.join(" ")}`;
            const title = evaled.errored ? "â˜ \u2000**Error**" : "ðŸ“¤\u2000**Output**";
            if (evaled.output.length + code.length > 1900)
                evaled.output = "Output too long.";
            evaled.message.edit([`ðŸ“¥\u2000**Input**${cb}js`, code, cb, `${title}${cb}js`, evaled.output, cb]);
        };
        try {
            let output = eval(code);
            if (output && typeof output.then === "function")
                output = await output;
            if (typeof output !== "string")
                output = util_1.default.inspect(output, { depth: 0 });
            output = `${logs.join("\n")}\n${logs.length && output === "undefined" ? "" : output}`;
            output = output.replace(tokenRegex, "[TOKEN]");
            if (output.length + code.length > 1900)
                output = "Output too long.";
            const sent = await message.util.send([
                `ðŸ“¥\u2000**Input**${cb}js`,
                code,
                cb,
                `ðŸ“¤\u2000**Output**${cb}js`,
                output,
                cb
            ]);
            evaled.message = sent;
            evaled.errored = false;
            evaled.output = output;
            return sent;
        }
        catch (err) {
            console.error(err); // eslint-disable-line no-console
            let error = err;
            error = error.toString();
            error = `${logs.join("\n")}\n${logs.length && error === "undefined" ? "" : error}`;
            error = error.replace(tokenRegex, "[TOKEN]");
            const sent = await message.util.send([
                `ðŸ“¥\u2000**Input**${cb}js`,
                code,
                cb,
                `â˜ \u2000**Error**${cb}js`,
                error,
                cb
            ]);
            evaled.message = sent;
            evaled.errored = true;
            evaled.output = error;
            return sent;
        }
    }
}
exports.default = EvalCommand;
//# sourceMappingURL=data:application/json;base64,