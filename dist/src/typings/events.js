"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../src/typings/events.ts"],"names":[],"mappings":"","sourcesContent":["import { CommandInteraction, ContextMenuInteraction, Message } from \"discord.js\";\nimport AkairoModule from \"../struct/AkairoModule\";\nimport Command from \"../struct/commands/Command\";\nimport ContextMenuCommand from \"../struct/contextMenuCommands/ContextMenuCommand\";\nimport Inhibitor from \"../struct/inhibitors/Inhibitor\";\nimport Listener from \"../struct/listeners/Listener\";\nimport Task from \"../struct/tasks/Task\";\nimport AkairoMessage from \"../util/AkairoMessage\";\nimport { BuiltInReasons } from \"../util/Constants\";\n\nexport interface AkairoHandlerEvents {\n\t/**\n\t * Emitted when a module is loaded.\n\t * @param mod - Module loaded.\n\t * @param isReload - Whether or not this was a reload.\n\t */\n\tload: [mod: AkairoModule, isReload: boolean];\n\t/**\n\t * Emitted when a module is removed.\n\t * @param mod - Module removed.\n\t */\n\tremove: [mod: AkairoModule];\n}\n\nexport interface CommandHandlerEvents extends AkairoHandlerEvents {\n\t/**\n\t * Emitted when a command is blocked by a post-message inhibitor. The built-in inhibitors are `owner`, `superUser`, `guild`, and `dm`.\n\t * @param message - Message sent.\n\t * @param command - Command blocked.\n\t * @param reason - Reason for the block.\n\t */\n\tcommandBlocked: [\n\t\tmessage: Message,\n\t\tcommand: Command,\n\t\treason: typeof BuiltInReasons | string\n\t];\n\n\t/**\n\t * Emitted when a command breaks out with a retry prompt.\n\t * @param message - Message sent.\n\t * @param command - Command being broken out.\n\t * @param breakMessage - Breakout message.\n\t */\n\tcommandBreakout: [message: Message, command: Command, breakMessage: Message];\n\n\t/**\n\t * Emitted when a command is cancelled via prompt or argument cancel.\n\t * @param message - Message sent.\n\t * @param command - Command executed.\n\t * @param retryMessage - Message to retry with. This is passed when a prompt was broken out of with a message that looks like a command.\n\t */\n\tcommandCancelled: [\n\t\tmessage: Message,\n\t\tcommand: Command,\n\t\tretryMessage?: Message\n\t];\n\n\t/**\n\t * Emitted when a command finishes execution.\n\t * @param message - Message sent.\n\t * @param command - Command executed.\n\t * @param args - The args passed to the command.\n\t * @param returnValue - The command's return value.\n\t */\n\tcommandFinished: [\n\t\tmessage: Message,\n\t\tcommand: Command,\n\t\targs: any,\n\t\treturnValue: any\n\t];\n\n\t/**\n\t * Emitted when a command is invalid\n\t * @param message - Message sent.\n\t * @param command - Command executed.\n\t */\n\tcommandInvalid: [message: Message, command: Command];\n\n\t/**\n\t * Emitted when a command is locked\n\t * @param message - Message sent.\n\t * @param command - Command executed.\n\t */\n\tcommandLocked: [message: Message, command: Command];\n\n\t/**\n\t * Emitted when a command starts execution.\n\t * @param message - Message sent.\n\t * @param command - Command executed.\n\t * @param args - The args passed to the command.\n\t */\n\tcommandStarted: [message: Message, command: Command, args: any];\n\n\t/**\n\t * Emitted when a command or slash command is found on cooldown.\n\t * @param message - Message sent.\n\t * @param command - Command blocked.\n\t * @param remaining - Remaining time in milliseconds for cooldown.\n\t */\n\tcooldown: [message: Message, command: Command, remaining: number];\n\n\t/**\n\t * Emitted when a command or inhibitor errors.\n\t * @param error - The error.\n\t * @param message - Message sent.\n\t * @param command - Command executed.\n\t */\n\terror: [error: Error, message: Message, command?: Command];\n\n\t/**\n\t * Emitted when a user is in a command argument prompt.\n\t * Used to prevent usage of commands during a prompt.\n\t * @param message - Message sent.\n\t */\n\tinPrompt: [message: Message];\n\n\t/**\n\t * Emitted when a command is loaded.\n\t * @param command - Module loaded.\n\t * @param isReload - Whether or not this was a reload.\n\t */\n\tload: [command: Command, isReload: boolean];\n\n\t/**\n\t * Emitted when a message is blocked by a pre-message inhibitor. The built-in inhibitors are 'client' and 'bot'.\n\t * @param message - Message sent.\n\t * @param reason - Reason for the block.\n\t */\n\tmessageBlocked: [message: Message | AkairoMessage, reason: string];\n\n\t/**\n\t * Emitted when a message does not start with the prefix or match a command.\n\t * @param message - Message sent.\n\t */\n\tmessageInvalid: [message: Message];\n\n\t/**\n\t * Emitted when a command permissions check is failed.\n\t * @param message - Message sent.\n\t * @param command - Command blocked.\n\t * @param type - Either 'client' or 'user'.\n\t * @param missing - The missing permissions.\n\t */\n\tmissingPermissions: [\n\t\tmessage: Message,\n\t\tcommand: Command,\n\t\ttype: \"client\" | \"user\",\n\t\tmissing?: any\n\t];\n\n\t/**\n\t * Emitted when a command is removed.\n\t * @param command - Command removed.\n\t */\n\tremove: [command: Command];\n\n\t/**\n\t * Emitted when a slash command is blocked by a post-message inhibitor. The built-in inhibitors are `owner`, `superUser`, `guild`, and `dm`.\n\t * @param message - The slash message.\n\t * @param command - Command blocked.\n\t * @param reason - Reason for the block.\n\t */\n\tslashBlocked: [message: AkairoMessage, command: Command, reason: string];\n\n\t/**\n\t * Emitted when a slash command errors.\n\t * @param error - The error.\n\t * @param message - The slash message.\n\t * @param command - Command executed.\n\t */\n\tslashError: [error: Error, message: AkairoMessage, command: Command];\n\n\t/**\n\t * Emitted when a slash command finishes execution.\n\t * @param message - The slash message.\n\t * @param command - Command executed.\n\t * @param args - The args passed to the command.\n\t * @param returnValue - The command's return value.\n\t */\n\tslashFinished: [\n\t\tmessage: AkairoMessage,\n\t\tcommand: Command,\n\t\targs: any,\n\t\treturnValue: any\n\t];\n\n\t/**\n\t * Emitted when a slash command permissions check is failed.\n\t * @param message - The slash message.\n\t * @param command - Command blocked.\n\t * @param type - Either 'client' or 'user'.\n\t * @param missing - The missing permissions.\n\t */\n\tslashMissingPermissions: [\n\t\tmessage: AkairoMessage,\n\t\tcommand: Command,\n\t\ttype: \"user\" | \"client\",\n\t\tmissing?: any\n\t];\n\n\t/**\n\t * Emitted when a an incoming interaction command cannot be matched with a command.\n\t * @param interaction - The incoming interaction.\n\t */\n\tslashNotFound: [interaction: CommandInteraction];\n\n\t/**\n\t * Emitted when a slash command starts execution.\n\t * @param message - The slash message.\n\t * @param command - Command executed.\n\t * @param args - The args passed to the command.\n\t */\n\tslashStarted: [message: AkairoMessage, command: Command, args: any];\n}\n\nexport interface InhibitorHandlerEvents extends AkairoHandlerEvents {\n\t/**\n\t * Emitted when an inhibitor is removed.\n\t * @param inhibitor - Inhibitor removed.\n\t */\n\tremove: [inhibitor: Inhibitor];\n\n\t/**\n\t * Emitted when an inhibitor is loaded.\n\t * @param inhibitor - Inhibitor loaded.\n\t * @param isReload - Whether or not this was a reload.\n\t */\n\tload: [inhibitor: Inhibitor, isReload: boolean];\n}\n\nexport interface ListenerHandlerEvents extends AkairoHandlerEvents {\n\t/**\n\t * Emitted when a listener is removed.\n\t * @param listener - Listener removed.\n\t */\n\tremove: [listener: Listener];\n\n\t/**\n\t * Emitted when a listener is loaded.\n\t * @param listener - Listener loaded.\n\t * @param isReload - Whether or not this was a reload.\n\t */\n\tload: [listener: Listener, isReload: boolean];\n}\n\nexport interface TaskHandlerEvents extends AkairoHandlerEvents {\n\t/**\n\t * Emitted when a task is removed.\n\t * @param task - Task removed.\n\t */\n\tremove: [task: Task];\n\n\t/**\n\t * Emitted when a task is loaded.\n\t * @param task - Task loaded.\n\t * @param isReload - Whether or not this was a reload.\n\t */\n\tload: [task: Task, isReload: boolean];\n}\n\nexport interface ContextMenuCommandHandlerEvents extends AkairoHandlerEvents {\n\t/**\n\t * Emitted when a context menu command is removed.\n\t * @param contextMenu - Context menu command removed.\n\t */\n\tremove: [contextMenu: ContextMenuCommand];\n\n\t/**\n\t * Emitted when a context menu command is loaded.\n\t * @param contextMenu - Context menu command loaded.\n\t * @param isReload - Whether or not this was a reload.\n\t */\n\tload: [contextMenu: ContextMenuCommand, isReload: boolean];\n\n\t/**\n\t * Emitted when a context menu command errors.\n\t * @param error - The error.\n\t * @param interaction - The interaction.\n\t * @param command - Command executed.\n\t */\n\terror: [\n\t\terror: Error,\n\t\tinteraction: ContextMenuInteraction,\n\t\tcommand: ContextMenuCommand\n\t];\n\n\t/**\n\t * Emitted when a context menu command finishes execution.\n\t * @param interaction - The interaction.\n\t * @param command - Command executed.\n\t * @param returnValue - The command's return value.\n\t */\n\tfinished: [\n\t\tinteraction: ContextMenuInteraction,\n\t\tcommand: ContextMenuCommand,\n\t\treturnValue: any\n\t];\n\n\t/**\n\t * Emitted when a an incoming interaction command cannot be matched with a command.\n\t * @param interaction - The incoming interaction.\n\t */\n\tnotFound: [interaction: ContextMenuInteraction];\n\n\t/**\n\t * Emitted when a command starts execution.\n\t * @param interaction - The interaction.\n\t * @param command - Command executed.\n\t * @param args - The args passed to the command.\n\t */\n\tstarted: [interaction: ContextMenuInteraction, command: ContextMenuCommand];\n}\n"]}