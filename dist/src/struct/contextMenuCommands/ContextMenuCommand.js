"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoModule_1 = __importDefault(require("../AkairoModule"));
/**
 * Represents a context menu command.
 * @param id - Listener ID.
 * @param options - Options for the context menu command.
 */
class ContextMenuCommand extends AkairoModule_1.default {
    constructor(id, { category, guilds, name, ownerOnly, superUserOnly, type }) {
        super(id, { category });
        this.guilds = guilds;
        this.name = name;
        this.ownerOnly = ownerOnly;
        this.superUserOnly = superUserOnly;
        this.type = type;
    }
    /**
     * Assign context menu commands to Specific guilds. This option will make the commands not register globally, but only in the chosen servers.
     */
    guilds;
    /**
     * The name of the context menu command.
     */
    name;
    /**
     * Usable only by the client owner.
     */
    ownerOnly;
    /**
     * Whether or not to allow client superUsers(s) only.
     */
    superUserOnly;
    /**
     * The type of the context menu command.
     */
    type;
    /**
     * Executes the context menu command.
     * @param interaction - The context menu command interaction.
     */
    // eslint-disable-next-line func-names, @typescript-eslint/no-unused-vars
    exec(interaction) {
        throw new AkairoError_1.default("NOT_IMPLEMENTED", this.constructor.name, "exec");
    }
    /**
     * Reloads the context menu command.
     */
    reload() {
        return super.reload();
    }
    /**
     * Removes the context menu command.
     */
    remove() {
        return super.remove();
    }
}
exports.default = ContextMenuCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGV4dE1lbnVDb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3N0cnVjdC9jb250ZXh0TWVudUNvbW1hbmRzL0NvbnRleHRNZW51Q29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLHlFQUFpRDtBQUdqRCxtRUFBb0U7QUFHcEU7Ozs7R0FJRztBQUNILE1BQThCLGtCQUFtQixTQUFRLHNCQUFZO0lBQ3BFLFlBQ0MsRUFBVSxFQUNWLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQTZCO1FBRXJGLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBYztJQUUzQjs7T0FFRztJQUNJLElBQUksQ0FBUztJQUVwQjs7T0FFRztJQUNJLFNBQVMsQ0FBVTtJQUUxQjs7T0FFRztJQUNJLGFBQWEsQ0FBVTtJQUU5Qjs7T0FFRztJQUNJLElBQUksQ0FBcUI7SUFzQmhDOzs7T0FHRztJQUNILHlFQUF5RTtJQUNsRSxJQUFJLENBQUMsV0FBbUM7UUFDOUMsTUFBTSxJQUFJLHFCQUFXLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVEOztPQUVHO0lBQ2EsTUFBTTtRQUNyQixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQXdCLENBQUM7SUFDN0MsQ0FBQztJQUVEOztPQUVHO0lBQ2EsTUFBTTtRQUNyQixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQXdCLENBQUM7SUFDN0MsQ0FBQztDQUNEO0FBaEZELHFDQWdGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHNwYWNlZC1jb21tZW50ICovXG5pbXBvcnQgeyBDb250ZXh0TWVudUludGVyYWN0aW9uLCBTbm93Zmxha2UgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IEFrYWlyb0Vycm9yIGZyb20gXCIuLi8uLi91dGlsL0FrYWlyb0Vycm9yXCI7XG5pbXBvcnQgQ2F0ZWdvcnkgZnJvbSBcIi4uLy4uL3V0aWwvQ2F0ZWdvcnlcIjtcbmltcG9ydCBBa2Fpcm9DbGllbnQgZnJvbSBcIi4uL0FrYWlyb0NsaWVudFwiO1xuaW1wb3J0IEFrYWlyb01vZHVsZSwgeyBBa2Fpcm9Nb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4uL0FrYWlyb01vZHVsZVwiO1xuaW1wb3J0IENvbnRleHRNZW51Q29tbWFuZEhhbmRsZXIgZnJvbSBcIi4vQ29udGV4dE1lbnVDb21tYW5kSGFuZGxlclwiO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb250ZXh0IG1lbnUgY29tbWFuZC5cbiAqIEBwYXJhbSBpZCAtIExpc3RlbmVyIElELlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgY29udGV4dCBtZW51IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIENvbnRleHRNZW51Q29tbWFuZCBleHRlbmRzIEFrYWlyb01vZHVsZSB7XG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHRpZDogc3RyaW5nLFxuXHRcdHsgY2F0ZWdvcnksIGd1aWxkcywgbmFtZSwgb3duZXJPbmx5LCBzdXBlclVzZXJPbmx5LCB0eXBlIH06IENvbnRleHRNZW51Q29tbWFuZE9wdGlvbnNcblx0KSB7XG5cdFx0c3VwZXIoaWQsIHsgY2F0ZWdvcnkgfSk7XG5cdFx0dGhpcy5ndWlsZHMgPSBndWlsZHM7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLm93bmVyT25seSA9IG93bmVyT25seTtcblx0XHR0aGlzLnN1cGVyVXNlck9ubHkgPSBzdXBlclVzZXJPbmx5O1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdH1cblxuXHQvKipcblx0ICogQXNzaWduIGNvbnRleHQgbWVudSBjb21tYW5kcyB0byBTcGVjaWZpYyBndWlsZHMuIFRoaXMgb3B0aW9uIHdpbGwgbWFrZSB0aGUgY29tbWFuZHMgbm90IHJlZ2lzdGVyIGdsb2JhbGx5LCBidXQgb25seSBpbiB0aGUgY2hvc2VuIHNlcnZlcnMuXG5cdCAqL1xuXHRwdWJsaWMgZ3VpbGRzOiBTbm93Zmxha2VbXTtcblxuXHQvKipcblx0ICogVGhlIG5hbWUgb2YgdGhlIGNvbnRleHQgbWVudSBjb21tYW5kLlxuXHQgKi9cblx0cHVibGljIG5hbWU6IHN0cmluZztcblxuXHQvKipcblx0ICogVXNhYmxlIG9ubHkgYnkgdGhlIGNsaWVudCBvd25lci5cblx0ICovXG5cdHB1YmxpYyBvd25lck9ubHk6IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRvIGFsbG93IGNsaWVudCBzdXBlclVzZXJzKHMpIG9ubHkuXG5cdCAqL1xuXHRwdWJsaWMgc3VwZXJVc2VyT25seTogYm9vbGVhbjtcblxuXHQvKipcblx0ICogVGhlIHR5cGUgb2YgdGhlIGNvbnRleHQgbWVudSBjb21tYW5kLlxuXHQgKi9cblx0cHVibGljIHR5cGU6IFwiVVNFUlwiIHwgXCJNRVNTQUdFXCI7XG5cblx0LyoqXG5cdCAqIFRoZSBjYXRlZ29yeSBvZiB0aGlzIGNvbnRleHQgbWVudSBjb21tYW5kLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgY2F0ZWdvcnk6IENhdGVnb3J5PHN0cmluZywgQ29udGV4dE1lbnVDb21tYW5kPjtcblxuXHQvKipcblx0ICogVGhlIEFrYWlybyBjbGllbnQuXG5cdCAqL1xuXHRwdWJsaWMgZGVjbGFyZSBjbGllbnQ6IEFrYWlyb0NsaWVudDtcblxuXHQvKipcblx0ICogVGhlIGZpbGVwYXRoLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgZmlsZXBhdGg6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGhhbmRsZXIuXG5cdCAqL1xuXHRwdWJsaWMgZGVjbGFyZSBoYW5kbGVyOiBDb250ZXh0TWVudUNvbW1hbmRIYW5kbGVyO1xuXG5cdC8qKlxuXHQgKiBFeGVjdXRlcyB0aGUgY29udGV4dCBtZW51IGNvbW1hbmQuXG5cdCAqIEBwYXJhbSBpbnRlcmFjdGlvbiAtIFRoZSBjb250ZXh0IG1lbnUgY29tbWFuZCBpbnRlcmFjdGlvbi5cblx0ICovXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcblx0cHVibGljIGV4ZWMoaW50ZXJhY3Rpb246IENvbnRleHRNZW51SW50ZXJhY3Rpb24pOiBhbnkge1xuXHRcdHRocm93IG5ldyBBa2Fpcm9FcnJvcihcIk5PVF9JTVBMRU1FTlRFRFwiLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwiZXhlY1wiKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWxvYWRzIHRoZSBjb250ZXh0IG1lbnUgY29tbWFuZC5cblx0ICovXG5cdHB1YmxpYyBvdmVycmlkZSByZWxvYWQoKTogQ29udGV4dE1lbnVDb21tYW5kIHtcblx0XHRyZXR1cm4gc3VwZXIucmVsb2FkKCkgYXMgQ29udGV4dE1lbnVDb21tYW5kO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGNvbnRleHQgbWVudSBjb21tYW5kLlxuXHQgKi9cblx0cHVibGljIG92ZXJyaWRlIHJlbW92ZSgpOiBDb250ZXh0TWVudUNvbW1hbmQge1xuXHRcdHJldHVybiBzdXBlci5yZW1vdmUoKSBhcyBDb250ZXh0TWVudUNvbW1hbmQ7XG5cdH1cbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIHVzZSBmb3IgY29udGV4dCBtZW51IGNvbW1hbmQgZXhlY3V0aW9uIGJlaGF2aW9yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRNZW51Q29tbWFuZE9wdGlvbnMgZXh0ZW5kcyBBa2Fpcm9Nb2R1bGVPcHRpb25zIHtcblx0LyoqXG5cdCAqIEFzc2lnbiBjb250ZXh0IG1lbnUgY29tbWFuZHMgdG8gU3BlY2lmaWMgZ3VpbGRzLiBUaGlzIG9wdGlvbiB3aWxsIG1ha2UgdGhlIGNvbW1hbmRzIG5vdCByZWdpc3RlciBnbG9iYWxseSwgYnV0IG9ubHkgaW4gdGhlIGNob3NlbiBzZXJ2ZXJzLlxuXHQgKi9cblx0Z3VpbGRzPzogU25vd2ZsYWtlW107XG5cblx0LyoqXG5cdCAqIFRoZSBuYW1lIG9mIHRoZSBjb250ZXh0IG1lbnUgY29tbWFuZC5cblx0ICovXG5cdG5hbWU6IHN0cmluZztcblxuXHQvKipcblx0ICogVXNhYmxlIG9ubHkgYnkgdGhlIGNsaWVudCBvd25lci5cblx0ICovXG5cdG93bmVyT25seT86IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRvIGFsbG93IGNsaWVudCBzdXBlclVzZXJzKHMpIG9ubHkuXG5cdCAqL1xuXHRzdXBlclVzZXJPbmx5PzogYm9vbGVhbjtcblxuXHQvKipcblx0ICogVGhlIHR5cGUgb2YgdGhlIGNvbnRleHQgbWVudSBjb21tYW5kLlxuXHQgKi9cblx0dHlwZTogXCJVU0VSXCIgfCBcIk1FU1NBR0VcIjtcbn1cbiJdfQ==