"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoHandler_1 = __importDefault(require("../AkairoHandler"));
const Task_1 = __importDefault(require("./Task"));
/**
 * Loads tasks.
 * @param client - The Akairo client.
 * @param options - Options.
 */
class TaskHandler extends AkairoHandler_1.default {
	constructor(
		client,
		{
			directory,
			classToHandle = Task_1.default,
			extensions = [".js", ".ts"],
			automateCategories,
			loadFilter
		}
	) {
		if (
			!(
				classToHandle.prototype instanceof Task_1.default ||
				classToHandle === Task_1.default
			)
		) {
			throw new AkairoError_1.default(
				"INVALID_CLASS_TO_HANDLE",
				classToHandle.name,
				Task_1.default.name
			);
		}
		super(client, {
			directory,
			classToHandle,
			extensions,
			automateCategories,
			loadFilter
		});
	}
	/**
	 * Deregisters a module.
	 * @param task - Module to use.
	 */
	deregister(task) {
		return super.deregister(task);
	}
	/**
	 * Finds a category by name.
	 * @param name - Name to find with.
	 */
	findCategory(name) {
		return super.findCategory(name);
	}
	/**
	 * Loads a task.
	 * @param thing - Module or path to module.
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	load(thing, isReload) {
		return super.load(thing, isReload);
	}
	/**
	 * Reads all tasks from the directory and loads them.
	 * @param directory - Directory to load from. Defaults to the directory passed in the constructor.
	 * @param filter - Filter for files, where true means it should be loaded.
	 */
	loadAll(directory, filter) {
		return super.loadAll(directory, filter);
	}
	/**
	 * Registers a task.
	 * @param task - Task to use.
	 * @param filepath - Filepath of task.
	 */
	register(task, filepath) {
		return super.register(task, filepath);
	}
	/**
	 * Reloads a task.
	 * @param id - ID of the task.
	 */
	reload(id) {
		return super.reload(id);
	}
	/**
	 * Reloads all tasks.
	 */
	reloadAll() {
		return super.reloadAll();
	}
	/**
	 * Removes a task.
	 * @param id - ID of the task.
	 */
	remove(id) {
		return super.remove(id);
	}
	/**
	 * Removes all tasks.
	 */
	removeAll() {
		return super.removeAll();
	}
	/**
	 * Start all tasks.
	 */
	startAll() {
		this.client.on("ready", () => {
			this.modules.forEach(module => {
				if (!(module instanceof Task_1.default)) return;
				if (module.runOnStart) module.exec();
				if (module.delay) {
					setInterval(() => {
						module.exec();
					}, Number(module.delay));
				}
			});
		});
	}
	on(event, listener) {
		return super.on(event, listener);
	}
}
exports.default = TaskHandler;
//# sourceMappingURL=data:application/json;base64,
