"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoHandler_1 = __importDefault(require("../AkairoHandler"));
const Inhibitor_1 = __importDefault(require("./Inhibitor"));
const Util_1 = __importDefault(require("../../util/Util"));
/**
 * Loads inhibitors and checks messages.
 * @param client - The Akairo client.
 * @param options - Options.
 */
class InhibitorHandler extends AkairoHandler_1.default {
	constructor(
		client,
		{
			directory,
			classToHandle = Inhibitor_1.default,
			extensions = [".js", ".ts"],
			automateCategories,
			loadFilter
		} = {}
	) {
		if (
			!(
				classToHandle.prototype instanceof Inhibitor_1.default ||
				classToHandle === Inhibitor_1.default
			)
		) {
			throw new AkairoError_1.default(
				"INVALID_CLASS_TO_HANDLE",
				classToHandle.name,
				Inhibitor_1.default.name
			);
		}
		super(client, {
			directory,
			classToHandle,
			extensions,
			automateCategories,
			loadFilter
		});
	}
	/**
	 * Deregisters a module.
	 * @param inhibitor - Module to use.
	 */
	deregister(inhibitor) {
		return super.deregister(inhibitor);
	}
	/**
	 * Finds a category by name.
	 * @param name - Name to find with.
	 */
	findCategory(name) {
		return super.findCategory(name);
	}
	/**
	 * Loads an inhibitor.
	 * @param thing - Module or path to module.
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	load(thing) {
		return super.load(thing);
	}
	/**
	 * Reads all inhibitors from the directory and loads them.
	 * @param directory - Directory to load from. Defaults to the directory passed in the constructor.
	 * @param filter - Filter for files, where true means it should be loaded.
	 */
	loadAll(directory, filter) {
		return super.loadAll(directory, filter);
	}
	/**
	 * Registers a module.
	 * @param inhibitor - Module to use.
	 * @param filepath - Filepath of module.
	 */
	register(inhibitor, filepath) {
		return super.register(inhibitor, filepath);
	}
	/**
	 * Reloads an inhibitor.
	 * @param id - ID of the inhibitor.
	 */
	reload(id) {
		return super.reload(id);
	}
	/**
	 * Reloads all inhibitors.
	 */
	reloadAll() {
		return super.reloadAll();
	}
	/**
	 * Removes an inhibitor.
	 * @param {string} id - ID of the inhibitor.
	 */
	remove(id) {
		return super.remove(id);
	}
	/**
	 * Removes all inhibitors.
	 */
	removeAll() {
		return super.removeAll();
	}
	/**
	 * Tests inhibitors against the message.
	 * Returns the reason if blocked.
	 * @param type - Type of inhibitor, 'all', 'pre', or 'post'.
	 * @param message - Message to test.
	 * @param command - Command to use.
	 */
	async test(type, message, command) {
		if (!this.modules.size) return null;
		const inhibitors = this.modules.filter(i => i.type === type);
		if (!inhibitors.size) return null;
		const promises = [];
		for (const inhibitor of inhibitors.values()) {
			promises.push(
				(async () => {
					// @ts-expect-error
					let inhibited = inhibitor.exec(message, command);
					if (Util_1.default.isPromise(inhibited)) inhibited = await inhibited;
					if (inhibited) return inhibitor;
					return null;
				})()
			);
		}
		const inhibitedInhibitors = (await Promise.all(promises)).filter(r => r);
		if (!inhibitedInhibitors.length) return null;
		inhibitedInhibitors.sort((a, b) => b.priority - a.priority);
		return inhibitedInhibitors[0].reason;
	}
	on(event, listener) {
		return super.on(event, listener);
	}
}
exports.default = InhibitorHandler;
//# sourceMappingURL=data:application/json;base64,
