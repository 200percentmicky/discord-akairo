"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoModule_1 = __importDefault(require("../AkairoModule"));
/**
 * Represents an inhibitor.
 * @param id - Inhibitor ID.
 * @param options - Options for the inhibitor.
 */
class Inhibitor extends AkairoModule_1.default {
    constructor(id, { category, reason = "", type = "post", priority = 0 } = {}) {
        super(id, { category });
        this.reason = reason;
        this.type = type;
        this.priority = priority;
    }
    /**
     * The priority of the inhibitor.
     */
    priority;
    /**
     * Reason emitted when command is inhibited.
     */
    reason;
    /**
     * The type of the inhibitor for when it should run.
     */
    type;
    exec(message, command) {
        throw new AkairoError_1.default("NOT_IMPLEMENTED", this.constructor.name, "exec");
    }
    /* eslint-enable func-names, @typescript-eslint/no-unused-vars */
    /**
     * Reloads the inhibitor.
     */
    reload() {
        return super.reload();
    }
    /**
     * Removes the inhibitor.
     */
    remove() {
        return super.remove();
    }
}
exports.default = Inhibitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5oaWJpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3N0cnVjdC9pbmhpYml0b3JzL0luaGliaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHlFQUFpRDtBQUlqRCxtRUFBb0U7QUFJcEU7Ozs7R0FJRztBQUNILE1BQThCLFNBQVUsU0FBUSxzQkFBWTtJQUMzRCxZQUNDLEVBQVUsRUFDVixFQUNDLFFBQVEsRUFDUixNQUFNLEdBQUcsRUFBRSxFQUNYLElBQUksR0FBRyxNQUFNLEVBQ2IsUUFBUSxHQUFHLENBQUMsS0FDUyxFQUFFO1FBRXhCLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzFCLENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVEsQ0FBUztJQTJCeEI7O09BRUc7SUFDSSxNQUFNLENBQVM7SUFFdEI7O09BRUc7SUFDSSxJQUFJLENBQVM7SUFXYixJQUFJLENBQ1YsT0FBZ0MsRUFDaEMsT0FBaUI7UUFFakIsTUFBTSxJQUFJLHFCQUFXLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUNELGlFQUFpRTtJQUVqRTs7T0FFRztJQUNhLE1BQU07UUFDckIsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFlLENBQUM7SUFDcEMsQ0FBQztJQUVEOztPQUVHO0lBQ2EsTUFBTTtRQUNyQixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQWUsQ0FBQztJQUNwQyxDQUFDO0NBQ0Q7QUF6RkQsNEJBeUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgQWthaXJvRXJyb3IgZnJvbSBcIi4uLy4uL3V0aWwvQWthaXJvRXJyb3JcIjtcbmltcG9ydCBBa2Fpcm9NZXNzYWdlIGZyb20gXCIuLi8uLi91dGlsL0FrYWlyb01lc3NhZ2VcIjtcbmltcG9ydCBDYXRlZ29yeSBmcm9tIFwiLi4vLi4vdXRpbC9DYXRlZ29yeVwiO1xuaW1wb3J0IEFrYWlyb0NsaWVudCBmcm9tIFwiLi4vQWthaXJvQ2xpZW50XCI7XG5pbXBvcnQgQWthaXJvTW9kdWxlLCB7IEFrYWlyb01vZHVsZU9wdGlvbnMgfSBmcm9tIFwiLi4vQWthaXJvTW9kdWxlXCI7XG5pbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vY29tbWFuZHMvQ29tbWFuZFwiO1xuaW1wb3J0IEluaGliaXRvckhhbmRsZXIgZnJvbSBcIi4vSW5oaWJpdG9ySGFuZGxlclwiO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gaW5oaWJpdG9yLlxuICogQHBhcmFtIGlkIC0gSW5oaWJpdG9yIElELlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgaW5oaWJpdG9yLlxuICovXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBJbmhpYml0b3IgZXh0ZW5kcyBBa2Fpcm9Nb2R1bGUge1xuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHR7XG5cdFx0XHRjYXRlZ29yeSxcblx0XHRcdHJlYXNvbiA9IFwiXCIsXG5cdFx0XHR0eXBlID0gXCJwb3N0XCIsXG5cdFx0XHRwcmlvcml0eSA9IDBcblx0XHR9OiBJbmhpYml0b3JPcHRpb25zID0ge31cblx0KSB7XG5cdFx0c3VwZXIoaWQsIHsgY2F0ZWdvcnkgfSk7XG5cblx0XHR0aGlzLnJlYXNvbiA9IHJlYXNvbjtcblxuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cblx0XHR0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIHByaW9yaXR5IG9mIHRoZSBpbmhpYml0b3IuXG5cdCAqL1xuXHRwdWJsaWMgcHJpb3JpdHk6IG51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGNhdGVnb3J5IHRoZSBpbmhpYml0b3IgYmVsb25ncyB0by5cblx0ICovXG5cdHB1YmxpYyBkZWNsYXJlIGNhdGVnb3J5OiBDYXRlZ29yeTxzdHJpbmcsIEluaGliaXRvcj47XG5cblx0LyoqXG5cdCAqIFRoZSBBa2Fpcm8gY2xpZW50LlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgY2xpZW50OiBBa2Fpcm9DbGllbnQ7XG5cblx0LyoqXG5cdCAqIFRoZSBmaWxlcGF0aC5cblx0ICovXG5cdHB1YmxpYyBkZWNsYXJlIGZpbGVwYXRoOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmhpYml0b3IgaGFuZGxlci5cblx0ICovXG5cdHB1YmxpYyBkZWNsYXJlIGhhbmRsZXI6IEluaGliaXRvckhhbmRsZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBJRCBvZiB0aGlzIGluaGliaXRvci5cblx0ICovXG5cdHB1YmxpYyBkZWNsYXJlIGlkOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFJlYXNvbiBlbWl0dGVkIHdoZW4gY29tbWFuZCBpcyBpbmhpYml0ZWQuXG5cdCAqL1xuXHRwdWJsaWMgcmVhc29uOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSB0eXBlIG9mIHRoZSBpbmhpYml0b3IgZm9yIHdoZW4gaXQgc2hvdWxkIHJ1bi5cblx0ICovXG5cdHB1YmxpYyB0eXBlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBtZXNzYWdlIHNob3VsZCBiZSBibG9ja2VkLlxuXHQgKiBBIHJldHVybiB2YWx1ZSBvZiB0cnVlIHdpbGwgYmxvY2sgdGhlIG1lc3NhZ2UuXG5cdCAqIElmIHJldHVybmluZyBhIFByb21pc2UsIGEgcmVzb2x2ZWQgdmFsdWUgb2YgdHJ1ZSB3aWxsIGJsb2NrIHRoZSBtZXNzYWdlLlxuXHQgKiBAcGFyYW0gbWVzc2FnZSAtIE1lc3NhZ2UgYmVpbmcgaGFuZGxlZC5cblx0ICogQHBhcmFtIGNvbW1hbmQgLSBDb21tYW5kIHRvIGNoZWNrLlxuXHQgKi9cblx0LyogZXNsaW50LWRpc2FibGUgZnVuYy1uYW1lcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5cdHB1YmxpYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UsIGNvbW1hbmQ/OiBDb21tYW5kKTogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5cdHB1YmxpYyBleGVjKFxuXHRcdG1lc3NhZ2U6IE1lc3NhZ2UgfCBBa2Fpcm9NZXNzYWdlLFxuXHRcdGNvbW1hbmQ/OiBDb21tYW5kXG5cdCk6IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+IHtcblx0XHR0aHJvdyBuZXcgQWthaXJvRXJyb3IoXCJOT1RfSU1QTEVNRU5URURcIiwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcImV4ZWNcIik7XG5cdH1cblx0LyogZXNsaW50LWVuYWJsZSBmdW5jLW5hbWVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cblxuXHQvKipcblx0ICogUmVsb2FkcyB0aGUgaW5oaWJpdG9yLlxuXHQgKi9cblx0cHVibGljIG92ZXJyaWRlIHJlbG9hZCgpOiBJbmhpYml0b3Ige1xuXHRcdHJldHVybiBzdXBlci5yZWxvYWQoKSBhcyBJbmhpYml0b3I7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgaW5oaWJpdG9yLlxuXHQgKi9cblx0cHVibGljIG92ZXJyaWRlIHJlbW92ZSgpOiBJbmhpYml0b3Ige1xuXHRcdHJldHVybiBzdXBlci5yZW1vdmUoKSBhcyBJbmhpYml0b3I7XG5cdH1cbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIHVzZSBmb3IgaW5oaWJpdG9yIGV4ZWN1dGlvbiBiZWhhdmlvci5cbiAqIEFsc28gaW5jbHVkZXMgcHJvcGVydGllcyBmcm9tIEFrYWlyb01vZHVsZU9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5oaWJpdG9yT3B0aW9ucyBleHRlbmRzIEFrYWlyb01vZHVsZU9wdGlvbnMge1xuXHQvKipcblx0ICogUmVhc29uIGVtaXR0ZWQgd2hlbiBjb21tYW5kIG9yIG1lc3NhZ2UgaXMgYmxvY2tlZC5cblx0ICovXG5cdHJlYXNvbj86IHN0cmluZztcblxuXHQvKipcblx0ICogQ2FuIGJlICdhbGwnIHRvIHJ1biBvbiBhbGwgbWVzc2FnZXMsICdwcmUnIHRvIHJ1biBvbiBtZXNzYWdlcyBub3QgYmxvY2tlZCBieSB0aGUgYnVpbHQtaW4gaW5oaWJpdG9ycywgb3IgJ3Bvc3QnIHRvIHJ1biBvbiBtZXNzYWdlcyB0aGF0IGFyZSBjb21tYW5kcy5cblx0ICogRGVmYXVsdHMgdG8gYHBvc3RgXG5cdCAqL1xuXHR0eXBlPzogXCJhbGxcIiB8IFwicHJlXCIgfCBcInBvc3RcIjtcblxuXHQvKipcblx0ICogUHJpb3JpdHkgZm9yIHRoZSBpbmhpYml0b3IgZm9yIHdoZW4gbW9yZSB0aGFuIG9uZSBpbmhpYml0b3JzIGJsb2NrIGEgbWVzc2FnZS5cblx0ICogVGhlIGluaGliaXRvciB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5IGlzIHRoZSBvbmUgdGhhdCBpcyB1c2VkIGZvciB0aGUgYmxvY2sgcmVhc29uLlxuXHQgKiBEZWZhdWx0cyB0byBgMGBcblx0ICovXG5cdHByaW9yaXR5PzogbnVtYmVyO1xufVxuIl19