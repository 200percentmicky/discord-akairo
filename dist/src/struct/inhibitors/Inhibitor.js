"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoModule_1 = __importDefault(require("../AkairoModule"));
/**
 * Represents an inhibitor.
 * @param id - Inhibitor ID.
 * @param options - Options for the inhibitor.
 */
class Inhibitor extends AkairoModule_1.default {
    constructor(id, { category, reason = "", type = "post", priority = 0 } = {}) {
        super(id, { category });
        this.reason = reason;
        this.type = type;
        this.priority = priority;
    }
    /**
     * The priority of the inhibitor.
     */
    priority;
    /**
     * Reason emitted when command is inhibited.
     */
    reason;
    /**
     * The type of the inhibitor for when it should run.
     */
    type;
    /**
     * Checks if message should be blocked.
     * A return value of true will block the message.
     * If returning a Promise, a resolved value of true will block the message.
     * @param message - Message being handled.
     * @param command - Command to check.
     */
    /* eslint-disable func-names, @typescript-eslint/no-unused-vars */
    /* public exec(message: Message, command?: Command): boolean | Promise<boolean>; */
    exec(message, command) {
        throw new AkairoError_1.default("NOT_IMPLEMENTED", this.constructor.name, "exec");
    }
    /* eslint-enable func-names, @typescript-eslint/no-unused-vars */
    /**
     * Reloads the inhibitor.
     */
    reload() {
        return super.reload();
    }
    /**
     * Removes the inhibitor.
     */
    remove() {
        return super.remove();
    }
}
exports.default = Inhibitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5oaWJpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3N0cnVjdC9pbmhpYml0b3JzL0luaGliaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHlFQUFpRDtBQUlqRCxtRUFBb0U7QUFJcEU7Ozs7R0FJRztBQUNILE1BQThCLFNBQVUsU0FBUSxzQkFBWTtJQUMzRCxZQUFtQixFQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxJQUFJLEdBQUcsTUFBTSxFQUFFLFFBQVEsR0FBRyxDQUFDLEtBQXVCLEVBQUU7UUFDM0csS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUSxDQUFTO0lBMkJ4Qjs7T0FFRztJQUNJLE1BQU0sQ0FBUztJQUV0Qjs7T0FFRztJQUNJLElBQUksQ0FBUztJQUVwQjs7Ozs7O09BTUc7SUFDSCxrRUFBa0U7SUFDbEUsbUZBQW1GO0lBQzVFLElBQUksQ0FBQyxPQUFnQyxFQUFFLE9BQWlCO1FBQzlELE1BQU0sSUFBSSxxQkFBVyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFDRCxpRUFBaUU7SUFFakU7O09BRUc7SUFDYSxNQUFNO1FBQ3JCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBd0IsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFDYSxNQUFNO1FBQ3JCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBZSxDQUFDO0lBQ3BDLENBQUM7Q0FDRDtBQTlFRCw0QkE4RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcbmltcG9ydCBBa2Fpcm9FcnJvciBmcm9tIFwiLi4vLi4vdXRpbC9Ba2Fpcm9FcnJvclwiO1xuaW1wb3J0IEFrYWlyb01lc3NhZ2UgZnJvbSBcIi4uLy4uL3V0aWwvQWthaXJvTWVzc2FnZVwiO1xuaW1wb3J0IENhdGVnb3J5IGZyb20gXCIuLi8uLi91dGlsL0NhdGVnb3J5XCI7XG5pbXBvcnQgQWthaXJvQ2xpZW50IGZyb20gXCIuLi9Ba2Fpcm9DbGllbnRcIjtcbmltcG9ydCBBa2Fpcm9Nb2R1bGUsIHsgQWthaXJvTW9kdWxlT3B0aW9ucyB9IGZyb20gXCIuLi9Ba2Fpcm9Nb2R1bGVcIjtcbmltcG9ydCBDb21tYW5kIGZyb20gXCIuLi9jb21tYW5kcy9Db21tYW5kXCI7XG5pbXBvcnQgSW5oaWJpdG9ySGFuZGxlciBmcm9tIFwiLi9JbmhpYml0b3JIYW5kbGVyXCI7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbmhpYml0b3IuXG4gKiBAcGFyYW0gaWQgLSBJbmhpYml0b3IgSUQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBpbmhpYml0b3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEluaGliaXRvciBleHRlbmRzIEFrYWlyb01vZHVsZSB7XG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCB7IGNhdGVnb3J5LCByZWFzb24gPSBcIlwiLCB0eXBlID0gXCJwb3N0XCIsIHByaW9yaXR5ID0gMCB9OiBJbmhpYml0b3JPcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihpZCwgeyBjYXRlZ29yeSB9KTtcblxuXHRcdHRoaXMucmVhc29uID0gcmVhc29uO1xuXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRcdHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgcHJpb3JpdHkgb2YgdGhlIGluaGliaXRvci5cblx0ICovXG5cdHB1YmxpYyBwcmlvcml0eTogbnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgY2F0ZWdvcnkgdGhlIGluaGliaXRvciBiZWxvbmdzIHRvLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgY2F0ZWdvcnk6IENhdGVnb3J5PHN0cmluZywgSW5oaWJpdG9yPjtcblxuXHQvKipcblx0ICogVGhlIEFrYWlybyBjbGllbnQuXG5cdCAqL1xuXHRwdWJsaWMgZGVjbGFyZSBjbGllbnQ6IEFrYWlyb0NsaWVudDtcblxuXHQvKipcblx0ICogVGhlIGZpbGVwYXRoLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgZmlsZXBhdGg6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGluaGliaXRvciBoYW5kbGVyLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgaGFuZGxlcjogSW5oaWJpdG9ySGFuZGxlcjtcblxuXHQvKipcblx0ICogVGhlIElEIG9mIHRoaXMgaW5oaWJpdG9yLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgaWQ6IHN0cmluZztcblxuXHQvKipcblx0ICogUmVhc29uIGVtaXR0ZWQgd2hlbiBjb21tYW5kIGlzIGluaGliaXRlZC5cblx0ICovXG5cdHB1YmxpYyByZWFzb246IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIHR5cGUgb2YgdGhlIGluaGliaXRvciBmb3Igd2hlbiBpdCBzaG91bGQgcnVuLlxuXHQgKi9cblx0cHVibGljIHR5cGU6IHN0cmluZztcblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIG1lc3NhZ2Ugc2hvdWxkIGJlIGJsb2NrZWQuXG5cdCAqIEEgcmV0dXJuIHZhbHVlIG9mIHRydWUgd2lsbCBibG9jayB0aGUgbWVzc2FnZS5cblx0ICogSWYgcmV0dXJuaW5nIGEgUHJvbWlzZSwgYSByZXNvbHZlZCB2YWx1ZSBvZiB0cnVlIHdpbGwgYmxvY2sgdGhlIG1lc3NhZ2UuXG5cdCAqIEBwYXJhbSBtZXNzYWdlIC0gTWVzc2FnZSBiZWluZyBoYW5kbGVkLlxuXHQgKiBAcGFyYW0gY29tbWFuZCAtIENvbW1hbmQgdG8gY2hlY2suXG5cdCAqL1xuXHQvKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cblx0LyogcHVibGljIGV4ZWMobWVzc2FnZTogTWVzc2FnZSwgY29tbWFuZD86IENvbW1hbmQpOiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjsgKi9cblx0cHVibGljIGV4ZWMobWVzc2FnZTogTWVzc2FnZSB8IEFrYWlyb01lc3NhZ2UsIGNvbW1hbmQ/OiBDb21tYW5kKTogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdHRocm93IG5ldyBBa2Fpcm9FcnJvcihcIk5PVF9JTVBMRU1FTlRFRFwiLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwiZXhlY1wiKTtcblx0fVxuXHQvKiBlc2xpbnQtZW5hYmxlIGZ1bmMtbmFtZXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuXG5cdC8qKlxuXHQgKiBSZWxvYWRzIHRoZSBpbmhpYml0b3IuXG5cdCAqL1xuXHRwdWJsaWMgb3ZlcnJpZGUgcmVsb2FkKCk6IFByb21pc2U8SW5oaWJpdG9yPiB7XG5cdFx0cmV0dXJuIHN1cGVyLnJlbG9hZCgpIGFzIFByb21pc2U8SW5oaWJpdG9yPjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBpbmhpYml0b3IuXG5cdCAqL1xuXHRwdWJsaWMgb3ZlcnJpZGUgcmVtb3ZlKCk6IEluaGliaXRvciB7XG5cdFx0cmV0dXJuIHN1cGVyLnJlbW92ZSgpIGFzIEluaGliaXRvcjtcblx0fVxufVxuXG4vKipcbiAqIE9wdGlvbnMgdG8gdXNlIGZvciBpbmhpYml0b3IgZXhlY3V0aW9uIGJlaGF2aW9yLlxuICogQWxzbyBpbmNsdWRlcyBwcm9wZXJ0aWVzIGZyb20gQWthaXJvTW9kdWxlT3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmhpYml0b3JPcHRpb25zIGV4dGVuZHMgQWthaXJvTW9kdWxlT3B0aW9ucyB7XG5cdC8qKlxuXHQgKiBSZWFzb24gZW1pdHRlZCB3aGVuIGNvbW1hbmQgb3IgbWVzc2FnZSBpcyBibG9ja2VkLlxuXHQgKi9cblx0cmVhc29uPzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBDYW4gYmUgJ2FsbCcgdG8gcnVuIG9uIGFsbCBtZXNzYWdlcywgJ3ByZScgdG8gcnVuIG9uIG1lc3NhZ2VzIG5vdCBibG9ja2VkIGJ5IHRoZSBidWlsdC1pbiBpbmhpYml0b3JzLCBvciAncG9zdCcgdG8gcnVuIG9uIG1lc3NhZ2VzIHRoYXQgYXJlIGNvbW1hbmRzLlxuXHQgKiBEZWZhdWx0cyB0byBgcG9zdGBcblx0ICovXG5cdHR5cGU/OiBcImFsbFwiIHwgXCJwcmVcIiB8IFwicG9zdFwiO1xuXG5cdC8qKlxuXHQgKiBQcmlvcml0eSBmb3IgdGhlIGluaGliaXRvciBmb3Igd2hlbiBtb3JlIHRoYW4gb25lIGluaGliaXRvcnMgYmxvY2sgYSBtZXNzYWdlLlxuXHQgKiBUaGUgaW5oaWJpdG9yIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHkgaXMgdGhlIG9uZSB0aGF0IGlzIHVzZWQgZm9yIHRoZSBibG9jayByZWFzb24uXG5cdCAqIERlZmF1bHRzIHRvIGAwYFxuXHQgKi9cblx0cHJpb3JpdHk/OiBudW1iZXI7XG59XG4iXX0=