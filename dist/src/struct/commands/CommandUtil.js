"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
/**
 * Command utilities.
 * @param handler - The command handler.
 * @param message - Message that triggered the command.
 */
class CommandUtil {
	/**  The command handler. */
	handler;
	/** Whether or not the command is a slash command. */
	isSlash;
	/** The last response sent. */
	lastResponse;
	/** Message that triggered the command. */
	message;
	/** Messages stored from prompts and prompt replies. */
	messages;
	/** The parsed components. */
	parsed;
	/** Whether or not the last response should be edited. */
	shouldEdit;
	constructor(handler, message) {
		/**
		 * The command handler.
		 * @type {CommandHandler}
		 */
		this.handler = handler;
		/**
		 * Message that triggered the command.
		 * @type {Message | AkairoMessage}
		 */
		this.message = message;
		/**
		 * The parsed components.
		 * @type {?ParsedComponentData}
		 */
		this.parsed = null;
		/**
		 * Whether or not the last response should be edited.
		 * @type {boolean}
		 */
		this.shouldEdit = false;
		/**
		 * The last response sent.
		 * @type {?Message | ?}
		 */
		this.lastResponse = null;
		if (this.handler.storeMessages) {
			/**
			 * Messages stored from prompts and prompt replies.
			 * @type {Collection<Snowflake, Message>?}
			 */
			this.messages = new discord_js_1.Collection();
		} else {
			this.messages = null;
		}
		/**
		 * Whether or not the command is a slash command.
		 * @type {boolean}
		 */
		this.isSlash = !!message.interaction;
	}
	/**
	 * Sets the last response.
	 */
	setLastResponse(message) {
		if (Array.isArray(message)) {
			this.lastResponse = message.slice(-1)[0];
		} else {
			this.lastResponse = message;
		}
		return this.lastResponse;
	}
	/**
	 * Adds client prompt or user reply to messages.
	 * @param {Message | Message[]} message - Message to add.
	 * @returns {Message | Message[]}
	 */
	addMessage(message) {
		if (this.handler.storeMessages) {
			if (Array.isArray(message)) {
				for (const msg of message) {
					this.messages?.set(msg.id, msg);
				}
			} else {
				this.messages?.set(message.id, message);
			}
		}
		return message;
	}
	/**
	 * Changes if the message should be edited.
	 * @param {boolean} state - Change to editable or not.
	 * @returns {CommandUtil}
	 */
	setEditable(state) {
		this.shouldEdit = Boolean(state);
		return this;
	}
	/**
	 * Sends a response or edits an old response if available.
	 * @param {string | MessagePayload | MessageOptions | InteractionReplyOptions} options - Options to use.
	 * @returns {Promise<Message | APIMessage | undefined>}
	 */
	// eslint-disable-next-line consistent-return
	async send(options) {
		const hasFiles =
			typeof options === "string" || !options.files?.length
				? false
				: options.files?.length > 0;
		let newOptions = {};
		if (typeof options === "string") {
			newOptions.content = options;
		} else {
			newOptions = options;
		}
		if (
			!(this.message.interaction instanceof discord_js_1.CommandInteraction)
		) {
			if (typeof options !== "string") delete options.ephemeral;
			if (
				this.shouldEdit &&
				!hasFiles &&
				!this.lastResponse.deleted &&
				!this.lastResponse.attachments.size
			) {
				return this.lastResponse.edit(options);
			}
			const sent = await this.message.channel?.send(options);
			const lastSent = this.setLastResponse(sent);
			this.setEditable(!lastSent.attachments.size);
			return sent;
		} else {
			if (typeof options !== "string") delete options.reply;
			if (
				this.lastResponse ||
				this.message.interaction.deferred ||
				this.message.interaction.replied
			) {
				this.lastResponse = await this.message.interaction.editReply(options);
				return this.lastResponse;
			} else {
				if (!newOptions.ephemeral) {
					newOptions.fetchReply = true;
					this.lastResponse = await this.message.interaction.reply(newOptions);
					return this.lastResponse;
				}
				await this.message.interaction.reply(newOptions);
			}
		}
	}
	/**
	 * Sends a response, overwriting the last response.
	 * @param {string | MessagePayload | MessageOptions} options - Options to use.
	 * @returns {Promise<Message | APIMessage>}
	 */
	async sendNew(options) {
		if (
			!(this.message.interaction instanceof discord_js_1.CommandInteraction)
		) {
			const sent = await this.message.channel?.send(options);
			const lastSent = this.setLastResponse(sent);
			this.setEditable(!lastSent.attachments.size);
			return sent;
		} else {
			const sent = await this.message.interaction.followUp(options);
			this.setLastResponse(sent);
			return sent;
		}
	}
	/**
	 * Send an inline reply or respond to a slash command.
	 * @param {string | MessagePayload | ReplyMessageOptions | InteractionReplyOptions} options - Options to use.
	 * @returns {Promise<Message|APIMessage>}
	 */
	reply(options) {
		let newOptions = {};
		if (typeof options == "string") {
			newOptions.content = options;
		} else {
			// @ts-expect-error
			newOptions = options;
		}
		if (
			!this.isSlash &&
			!this.shouldEdit &&
			!(newOptions instanceof discord_js_1.MessagePayload) &&
			// @ts-expect-error
			!this.message.deleted
		) {
			// @ts-expect-error
			newOptions.reply = {
				messageReference: this.message,
				failIfNotExists: newOptions.failIfNotExists ?? true
			};
		} // @ts-expect-error
		return this.send(newOptions);
	}
	/**
	 * Edits the last response.
	 * If the message is a slash command, edits the slash response.
	 * @param {string | MessageEditOptions | MessagePayload | WebhookEditMessageOptions} options - Options to use.
	 * @returns {Promise<Message>}
	 */
	edit(options) {
		if (this.isSlash) {
			// @ts-expect-error
			return this.lastResponse.interaction.editReply(options);
		} else {
			return this.lastResponse.edit(options);
		}
	}
	/**
	 * Deletes the last response.
	 * @returns {Promise<Message | void>}
	 */
	delete() {
		if (this.isSlash) {
			// @ts-expect-error
			return this.message.interaction.deleteReply();
		} else {
			return this.lastResponse?.delete();
		}
	}
}
exports.default = CommandUtil;
//# sourceMappingURL=data:application/json;base64,
