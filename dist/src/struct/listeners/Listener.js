"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoModule_1 = __importDefault(require("../AkairoModule"));
/**
 * Represents a listener.
 * @param id - Listener ID.
 * @param options - Options for the listener.
 */
class Listener extends AkairoModule_1.default {
    constructor(id, { category, emitter, event, type = "on" }) {
        super(id, { category });
        this.emitter = emitter;
        this.event = event;
        this.type = type;
    }
    /**
     * The event emitter.
     */
    emitter;
    /**
     * The event name listened to.
     */
    event;
    /**
     * Type of listener.
     */
    type;
    /**
     * Executes the listener.
     * @param args - Arguments.
     */
    // @ts-expect-error
    // eslint-disable-next-line func-names, @typescript-eslint/no-unused-vars
    exec(...args) {
        throw new AkairoError_1.default("NOT_IMPLEMENTED", this.constructor.name, "exec");
    }
    /**
     * Reloads the listener.
     */
    reload() {
        return super.reload();
    }
    /**
     * Removes the listener.
     */
    remove() {
        return super.remove();
    }
}
exports.default = Listener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdGVuZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc3RydWN0L2xpc3RlbmVycy9MaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlFQUFpRDtBQUdqRCxtRUFBb0U7QUFHcEU7Ozs7R0FJRztBQUNILE1BQThCLFFBQVMsU0FBUSxzQkFBWTtJQUMxRCxZQUNDLEVBQVUsRUFDVixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBRyxJQUFJLEVBQW1CO1FBRTFELEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFZRDs7T0FFRztJQUNJLE9BQU8sQ0FBd0I7SUFFdEM7O09BRUc7SUFDSSxLQUFLLENBQVM7SUFZckI7O09BRUc7SUFDSSxJQUFJLENBQVM7SUFFcEI7OztPQUdHO0lBQ0gsbUJBQW1CO0lBQ25CLHlFQUF5RTtJQUN6RCxJQUFJLENBQUMsR0FBRyxJQUFXO1FBQ2xDLE1BQU0sSUFBSSxxQkFBVyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7T0FFRztJQUNhLE1BQU07UUFDckIsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFjLENBQUM7SUFDbkMsQ0FBQztJQUVEOztPQUVHO0lBQ2EsTUFBTTtRQUNyQixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQWMsQ0FBQztJQUNuQyxDQUFDO0NBQ0Q7QUF4RUQsMkJBd0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRzXCI7XG5pbXBvcnQgQWthaXJvRXJyb3IgZnJvbSBcIi4uLy4uL3V0aWwvQWthaXJvRXJyb3JcIjtcbmltcG9ydCBDYXRlZ29yeSBmcm9tIFwiLi4vLi4vdXRpbC9DYXRlZ29yeVwiO1xuaW1wb3J0IEFrYWlyb0NsaWVudCBmcm9tIFwiLi4vQWthaXJvQ2xpZW50XCI7XG5pbXBvcnQgQWthaXJvTW9kdWxlLCB7IEFrYWlyb01vZHVsZU9wdGlvbnMgfSBmcm9tIFwiLi4vQWthaXJvTW9kdWxlXCI7XG5pbXBvcnQgTGlzdGVuZXJIYW5kbGVyIGZyb20gXCIuL0xpc3RlbmVySGFuZGxlclwiO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsaXN0ZW5lci5cbiAqIEBwYXJhbSBpZCAtIExpc3RlbmVyIElELlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgbGlzdGVuZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIExpc3RlbmVyIGV4dGVuZHMgQWthaXJvTW9kdWxlIHtcblx0cHVibGljIGNvbnN0cnVjdG9yKFxuXHRcdGlkOiBzdHJpbmcsXG5cdFx0eyBjYXRlZ29yeSwgZW1pdHRlciwgZXZlbnQsIHR5cGUgPSBcIm9uXCIgfTogTGlzdGVuZXJPcHRpb25zXG5cdCkge1xuXHRcdHN1cGVyKGlkLCB7IGNhdGVnb3J5IH0pO1xuXG5cdFx0dGhpcy5lbWl0dGVyID0gZW1pdHRlcjtcblxuXHRcdHRoaXMuZXZlbnQgPSBldmVudDtcblxuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNhdGVnb3J5IG9mIHRoaXMgbGlzdGVuZXIuXG5cdCAqL1xuXHRwdWJsaWMgZGVjbGFyZSBjYXRlZ29yeTogQ2F0ZWdvcnk8c3RyaW5nLCBMaXN0ZW5lcj47XG5cblx0LyoqXG5cdCAqIFRoZSBBa2Fpcm8gY2xpZW50LlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgY2xpZW50OiBBa2Fpcm9DbGllbnQ7XG5cblx0LyoqXG5cdCAqIFRoZSBldmVudCBlbWl0dGVyLlxuXHQgKi9cblx0cHVibGljIGVtaXR0ZXI6IHN0cmluZyB8IEV2ZW50RW1pdHRlcjtcblxuXHQvKipcblx0ICogVGhlIGV2ZW50IG5hbWUgbGlzdGVuZWQgdG8uXG5cdCAqL1xuXHRwdWJsaWMgZXZlbnQ6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGZpbGVwYXRoLlxuXHQgKi9cblx0cHVibGljIGRlY2xhcmUgZmlsZXBhdGg6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGhhbmRsZXIuXG5cdCAqL1xuXHRwdWJsaWMgZGVjbGFyZSBoYW5kbGVyOiBMaXN0ZW5lckhhbmRsZXI7XG5cblx0LyoqXG5cdCAqIFR5cGUgb2YgbGlzdGVuZXIuXG5cdCAqL1xuXHRwdWJsaWMgdHlwZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBFeGVjdXRlcyB0aGUgbGlzdGVuZXIuXG5cdCAqIEBwYXJhbSBhcmdzIC0gQXJndW1lbnRzLlxuXHQgKi9cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5cdHB1YmxpYyBhYnN0cmFjdCBleGVjKC4uLmFyZ3M6IGFueVtdKTogYW55IHtcblx0XHR0aHJvdyBuZXcgQWthaXJvRXJyb3IoXCJOT1RfSU1QTEVNRU5URURcIiwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcImV4ZWNcIik7XG5cdH1cblxuXHQvKipcblx0ICogUmVsb2FkcyB0aGUgbGlzdGVuZXIuXG5cdCAqL1xuXHRwdWJsaWMgb3ZlcnJpZGUgcmVsb2FkKCk6IExpc3RlbmVyIHtcblx0XHRyZXR1cm4gc3VwZXIucmVsb2FkKCkgYXMgTGlzdGVuZXI7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgbGlzdGVuZXIuXG5cdCAqL1xuXHRwdWJsaWMgb3ZlcnJpZGUgcmVtb3ZlKCk6IExpc3RlbmVyIHtcblx0XHRyZXR1cm4gc3VwZXIucmVtb3ZlKCkgYXMgTGlzdGVuZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIHVzZSBmb3IgbGlzdGVuZXIgZXhlY3V0aW9uIGJlaGF2aW9yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RlbmVyT3B0aW9ucyBleHRlbmRzIEFrYWlyb01vZHVsZU9wdGlvbnMge1xuXHQvKipcblx0ICogVGhlIGV2ZW50IGVtaXR0ZXIsIGVpdGhlciBhIGtleSBmcm9tIGBMaXN0ZW5lckhhbmRsZXIjZW1pdHRlcnNgIG9yIGFuIEV2ZW50RW1pdHRlci5cblx0ICovXG5cdGVtaXR0ZXI6IHN0cmluZyB8IEV2ZW50RW1pdHRlcjtcblxuXHQvKipcblx0ICogRXZlbnQgbmFtZSB0byBsaXN0ZW4gdG8uXG5cdCAqL1xuXHRldmVudDogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUeXBlIG9mIGxpc3RlbmVyLCBlaXRoZXIgJ29uJyBvciAnb25jZScuXG5cdCAqIERlZmF1bHRzIHRvIGBvbmBcblx0ICovXG5cdHR5cGU/OiBzdHJpbmc7XG59XG4iXX0=