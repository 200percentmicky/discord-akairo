"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_1 = __importDefault(require("../../util/AkairoError"));
const AkairoHandler_1 = __importDefault(require("../AkairoHandler"));
const discord_js_1 = require("discord.js");
const Util_1 = __importDefault(require("../../util/Util"));
const Listener_1 = __importDefault(require("./Listener"));
/**
 * Loads listeners and registers them with EventEmitters.
 * @param client - The Akairo client.
 * @param options - Options.
 */
class ListenerHandler extends AkairoHandler_1.default {
	/**
	 * EventEmitters for use, mapped by name to EventEmitter.
	 * By default, 'client' is set to the given client.
	 */
	emitters;
	constructor(
		client,
		{
			directory,
			classToHandle = Listener_1.default,
			extensions = [".js", ".ts"],
			automateCategories,
			loadFilter
		} = {}
	) {
		if (
			!(
				classToHandle.prototype instanceof Listener_1.default ||
				classToHandle === Listener_1.default
			)
		) {
			throw new AkairoError_1.default(
				"INVALID_CLASS_TO_HANDLE",
				classToHandle.name,
				Listener_1.default.name
			);
		}
		super(client, {
			directory,
			classToHandle,
			extensions,
			automateCategories,
			loadFilter
		});
		this.emitters = new discord_js_1.Collection();
		this.emitters.set("client", this.client);
	}
	/**
	 * Adds a listener to the EventEmitter.
	 * @param id - ID of the listener.
	 */
	addToEmitter(id) {
		const listener = this.modules.get(id.toString());
		if (!listener)
			throw new AkairoError_1.default(
				"MODULE_NOT_FOUND",
				this.classToHandle.name,
				id
			);
		/**
		 * @type {AkairoHandler}
		 */
		const emitter = Util_1.default.isEventEmitter(listener.emitter)
			? listener.emitter
			: this.emitters.get(listener.emitter);
		if (!Util_1.default.isEventEmitter(emitter))
			throw new AkairoError_1.default(
				"INVALID_TYPE",
				"emitter",
				"EventEmitter",
				true
			);
		if (listener.type === "once") {
			emitter.once(listener.event, listener.exec);
			return listener;
		}
		emitter.on(listener.event, listener.exec);
		return listener;
	}
	/**
	 * Deregisters a module.
	 * @param mod - Module to use.
	 */
	deregister(listener) {
		this.removeFromEmitter(listener.id);
		super.deregister(listener);
	}
	/**
	 * Finds a category by name.
	 * @param name - Name to find with.
	 */
	findCategory(name) {
		return super.findCategory(name);
	}
	/**
	 * Loads a module, can be a module class or a filepath.
	 * @param thing - Module class or path to module.
	 * @param isReload - Whether this is a reload or not.
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	load(thing, isReload) {
		return super.load(thing, isReload);
	}
	/**
	 * Reads all listeners from the directory and loads them.
	 * @param directory - Directory to load from. Defaults to the directory passed in the constructor.
	 * @param filter - Filter for files, where true means it should be loaded.
	 */
	loadAll(directory, filter) {
		return super.loadAll(directory, filter);
	}
	/**
	 * Registers a module.
	 * @param listener - Module to use.
	 * @param filepath - Filepath of module.
	 */
	register(listener, filepath) {
		super.register(listener, filepath);
		listener.exec = listener.exec.bind(listener);
		this.addToEmitter(listener.id);
	}
	/**
	 * Reloads a listener.
	 * @param id - ID of the listener.
	 */
	reload(id) {
		return super.reload(id);
	}
	/**
	 * Reloads all listeners.
	 */
	reloadAll() {
		return super.reloadAll();
	}
	/**
	 * Removes a listener.
	 * @param id - ID of the listener.
	 */
	remove(id) {
		return super.remove(id);
	}
	/**
	 * Removes all listeners.
	 */
	removeAll() {
		return super.removeAll();
	}
	/**
	 * Removes a listener from the EventEmitter.
	 * @param id - ID of the listener.
	 */
	removeFromEmitter(id) {
		const listener = this.modules.get(id.toString());
		if (!listener)
			throw new AkairoError_1.default(
				"MODULE_NOT_FOUND",
				this.classToHandle.name,
				id
			);
		const emitter = Util_1.default.isEventEmitter(listener.emitter)
			? listener.emitter
			: this.emitters.get(listener.emitter);
		if (!Util_1.default.isEventEmitter(emitter))
			throw new AkairoError_1.default(
				"INVALID_TYPE",
				"emitter",
				"EventEmitter",
				true
			);
		emitter.removeListener(listener.event, listener.exec);
		return listener;
	}
	/**
	 * Sets custom emitters.
	 * @param emitters - Emitters to use. The key is the name and value is the emitter.
	 */
	setEmitters(emitters) {
		for (const [key, value] of Object.entries(emitters)) {
			if (!Util_1.default.isEventEmitter(value))
				throw new AkairoError_1.default(
					"INVALID_TYPE",
					key,
					"EventEmitter",
					true
				);
			this.emitters.set(key, value);
		}
		return this;
	}
	on(event, listener) {
		return super.on(event, listener);
	}
}
exports.default = ListenerHandler;
//# sourceMappingURL=data:application/json;base64,
