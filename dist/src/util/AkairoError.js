"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Messages = {
    // Module-related
    FILE_NOT_FOUND: (filename) => `File '${filename}' not found`,
    MODULE_NOT_FOUND: (constructor, id) => `${constructor} '${id}' does not exist`,
    ALREADY_LOADED: (constructor, id) => `${constructor} '${id}' is already loaded`,
    NOT_RELOADABLE: (constructor, id) => `${constructor} '${id}' is not reloadable`,
    INVALID_CLASS_TO_HANDLE: (given, expected) => `Class to handle ${given} is not a subclass of ${expected}`,
    // Command-related
    ALIAS_CONFLICT: (alias, id, conflict) => `Alias '${alias}' of '${id}' already exists on '${conflict}'`,
    // Options-related
    COMMAND_UTIL_EXPLICIT: "The command handler options `handleEdits` and `storeMessages` require the `commandUtil` option to be true",
    UNKNOWN_MATCH_TYPE: (match) => `Unknown match type '${match}'`,
    // Generic errors
    NOT_INSTANTIABLE: (constructor) => `${constructor} is not instantiable`,
    NOT_IMPLEMENTED: (constructor, method) => `${constructor}#${method} has not been implemented`,
    INVALID_TYPE: (name, expected, vowel = false) => `Value of '${name}' was not ${vowel ? "an" : "a"} ${expected}`
};
/**
 * Represents an error for Akairo.
 * @param key - Error key.
 * @param args - Arguments.
 */
class AkairoError extends Error {
    constructor(key, ...args) {
        if (Messages[key] == null)
            throw new TypeError(`Error key '${key}' does not exist`);
        const message = typeof Messages[key] === "function" ? Messages[key](...args) : Messages[key];
        super(message);
        this.code = key;
    }
    /**
     * The error code.
     */
    code;
    /**
     * The error name.
     */
    get name() {
        return `AkairoError [${this.code}]`;
    }
}
exports.default = AkairoError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWthaXJvRXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbC9Ba2Fpcm9FcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUSxHQUFHO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjLEVBQUUsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVMsUUFBUSxhQUFhO0lBQ2pFLGdCQUFnQixFQUFFLENBQUMsV0FBZ0IsRUFBRSxFQUFPLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxLQUFLLEVBQUUsa0JBQWtCO0lBQ3hGLGNBQWMsRUFBRSxDQUFDLFdBQWdCLEVBQUUsRUFBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFdBQVcsS0FBSyxFQUFFLHFCQUFxQjtJQUN6RixjQUFjLEVBQUUsQ0FBQyxXQUFnQixFQUFFLEVBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxXQUFXLEtBQUssRUFBRSxxQkFBcUI7SUFDekYsdUJBQXVCLEVBQUUsQ0FBQyxLQUFVLEVBQUUsUUFBYSxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyx5QkFBeUIsUUFBUSxFQUFFO0lBRW5ILGtCQUFrQjtJQUNsQixjQUFjLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBTyxFQUFFLFFBQWEsRUFBRSxFQUFFLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRSx3QkFBd0IsUUFBUSxHQUFHO0lBRXJILGtCQUFrQjtJQUNsQixxQkFBcUIsRUFDcEIsMkdBQTJHO0lBQzVHLGtCQUFrQixFQUFFLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsS0FBSyxHQUFHO0lBRW5FLGlCQUFpQjtJQUNqQixnQkFBZ0IsRUFBRSxDQUFDLFdBQWdCLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxzQkFBc0I7SUFDNUUsZUFBZSxFQUFFLENBQUMsV0FBZ0IsRUFBRSxNQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxJQUFJLE1BQU0sMkJBQTJCO0lBQ3ZHLFlBQVksRUFBRSxDQUFDLElBQVMsRUFBRSxRQUFhLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQ3pELGFBQWEsSUFBSSxhQUFhLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksUUFBUSxFQUFFO0NBQy9ELENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBcUIsV0FBWSxTQUFRLEtBQUs7SUFDN0MsWUFBbUIsR0FBMEIsRUFBRSxHQUFHLElBQTBCO1FBQzNFLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUk7WUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sT0FBTyxHQUNaLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBMEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSSxDQUFTO0lBRXBCOztPQUVHO0lBQ0gsSUFBb0IsSUFBSTtRQUN2QixPQUFPLGdCQUFnQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDckMsQ0FBQztDQUNEO0FBckJELDhCQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1lc3NhZ2VzID0ge1xuXHQvLyBNb2R1bGUtcmVsYXRlZFxuXHRGSUxFX05PVF9GT1VORDogKGZpbGVuYW1lOiBhbnkpID0+IGBGaWxlICcke2ZpbGVuYW1lfScgbm90IGZvdW5kYCxcblx0TU9EVUxFX05PVF9GT1VORDogKGNvbnN0cnVjdG9yOiBhbnksIGlkOiBhbnkpID0+IGAke2NvbnN0cnVjdG9yfSAnJHtpZH0nIGRvZXMgbm90IGV4aXN0YCxcblx0QUxSRUFEWV9MT0FERUQ6IChjb25zdHJ1Y3RvcjogYW55LCBpZDogYW55KSA9PiBgJHtjb25zdHJ1Y3Rvcn0gJyR7aWR9JyBpcyBhbHJlYWR5IGxvYWRlZGAsXG5cdE5PVF9SRUxPQURBQkxFOiAoY29uc3RydWN0b3I6IGFueSwgaWQ6IGFueSkgPT4gYCR7Y29uc3RydWN0b3J9ICcke2lkfScgaXMgbm90IHJlbG9hZGFibGVgLFxuXHRJTlZBTElEX0NMQVNTX1RPX0hBTkRMRTogKGdpdmVuOiBhbnksIGV4cGVjdGVkOiBhbnkpID0+IGBDbGFzcyB0byBoYW5kbGUgJHtnaXZlbn0gaXMgbm90IGEgc3ViY2xhc3Mgb2YgJHtleHBlY3RlZH1gLFxuXG5cdC8vIENvbW1hbmQtcmVsYXRlZFxuXHRBTElBU19DT05GTElDVDogKGFsaWFzOiBhbnksIGlkOiBhbnksIGNvbmZsaWN0OiBhbnkpID0+IGBBbGlhcyAnJHthbGlhc30nIG9mICcke2lkfScgYWxyZWFkeSBleGlzdHMgb24gJyR7Y29uZmxpY3R9J2AsXG5cblx0Ly8gT3B0aW9ucy1yZWxhdGVkXG5cdENPTU1BTkRfVVRJTF9FWFBMSUNJVDpcblx0XHRcIlRoZSBjb21tYW5kIGhhbmRsZXIgb3B0aW9ucyBgaGFuZGxlRWRpdHNgIGFuZCBgc3RvcmVNZXNzYWdlc2AgcmVxdWlyZSB0aGUgYGNvbW1hbmRVdGlsYCBvcHRpb24gdG8gYmUgdHJ1ZVwiLFxuXHRVTktOT1dOX01BVENIX1RZUEU6IChtYXRjaDogYW55KSA9PiBgVW5rbm93biBtYXRjaCB0eXBlICcke21hdGNofSdgLFxuXG5cdC8vIEdlbmVyaWMgZXJyb3JzXG5cdE5PVF9JTlNUQU5USUFCTEU6IChjb25zdHJ1Y3RvcjogYW55KSA9PiBgJHtjb25zdHJ1Y3Rvcn0gaXMgbm90IGluc3RhbnRpYWJsZWAsXG5cdE5PVF9JTVBMRU1FTlRFRDogKGNvbnN0cnVjdG9yOiBhbnksIG1ldGhvZDogYW55KSA9PiBgJHtjb25zdHJ1Y3Rvcn0jJHttZXRob2R9IGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZGAsXG5cdElOVkFMSURfVFlQRTogKG5hbWU6IGFueSwgZXhwZWN0ZWQ6IGFueSwgdm93ZWwgPSBmYWxzZSkgPT5cblx0XHRgVmFsdWUgb2YgJyR7bmFtZX0nIHdhcyBub3QgJHt2b3dlbCA/IFwiYW5cIiA6IFwiYVwifSAke2V4cGVjdGVkfWBcbn07XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBlcnJvciBmb3IgQWthaXJvLlxuICogQHBhcmFtIGtleSAtIEVycm9yIGtleS5cbiAqIEBwYXJhbSBhcmdzIC0gQXJndW1lbnRzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBa2Fpcm9FcnJvciBleHRlbmRzIEVycm9yIHtcblx0cHVibGljIGNvbnN0cnVjdG9yKGtleToga2V5b2YgdHlwZW9mIE1lc3NhZ2VzLCAuLi5hcmdzOiAoc3RyaW5nIHwgYm9vbGVhbilbXSkge1xuXHRcdGlmIChNZXNzYWdlc1trZXldID09IG51bGwpIHRocm93IG5ldyBUeXBlRXJyb3IoYEVycm9yIGtleSAnJHtrZXl9JyBkb2VzIG5vdCBleGlzdGApO1xuXHRcdGNvbnN0IG1lc3NhZ2UgPVxuXHRcdFx0dHlwZW9mIE1lc3NhZ2VzW2tleV0gPT09IFwiZnVuY3Rpb25cIiA/IChNZXNzYWdlc1trZXldIGFzICguLi5hOiBhbnlbXSkgPT4gYW55KSguLi5hcmdzKSA6IE1lc3NhZ2VzW2tleV07XG5cblx0XHRzdXBlcihtZXNzYWdlKTtcblx0XHR0aGlzLmNvZGUgPSBrZXk7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGVycm9yIGNvZGUuXG5cdCAqL1xuXHRwdWJsaWMgY29kZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgZXJyb3IgbmFtZS5cblx0ICovXG5cdHB1YmxpYyBvdmVycmlkZSBnZXQgbmFtZSgpIHtcblx0XHRyZXR1cm4gYEFrYWlyb0Vycm9yIFske3RoaXMuY29kZX1dYDtcblx0fVxufVxuIl19