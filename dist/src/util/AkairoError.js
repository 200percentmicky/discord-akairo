"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Messages = {
    // Module-related
    FILE_NOT_FOUND: (filename) => `File '${filename}' not found`,
    MODULE_NOT_FOUND: (constructor, id) => `${constructor} '${id}' does not exist`,
    ALREADY_LOADED: (constructor, id) => `${constructor} '${id}' is already loaded`,
    NOT_RELOADABLE: (constructor, id) => `${constructor} '${id}' is not reloadable`,
    INVALID_CLASS_TO_HANDLE: (given, expected) => `Class to handle ${given} is not a subclass of ${expected}`,
    // Command-related
    ALIAS_CONFLICT: (alias, id, conflict) => `Alias '${alias}' of '${id}' already exists on '${conflict}'`,
    // Options-related
    COMMAND_UTIL_EXPLICIT: "The command handler options `handleEdits` and `storeMessages` require the `commandUtil` option to be true",
    UNKNOWN_MATCH_TYPE: (match) => `Unknown match type '${match}'`,
    // Generic errors
    NOT_INSTANTIABLE: (constructor) => `${constructor} is not instantiable`,
    NOT_IMPLEMENTED: (constructor, method) => `${constructor}#${method} has not been implemented`,
    INVALID_TYPE: (name, expected, vowel = false) => `Value of '${name}' was not ${vowel ? "an" : "a"} ${expected}`
};
/**
 * Represents an error for Akairo.
 * @param key - Error key.
 * @param args - Arguments.
 */
class AkairoError extends Error {
    constructor(key, ...args) {
        if (Messages[key] == null)
            throw new TypeError(`Error key '${key}' does not exist`);
        const message = typeof Messages[key] === "function" ? Messages[key](...args) : Messages[key];
        super(message);
        this.code = key;
    }
    /**
     * The error code.
     */
    code;
    /**
     * The error name.
     */
    get name() {
        return `AkairoError [${this.code}]`;
    }
}
exports.default = AkairoError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWthaXJvRXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbC9Ba2Fpcm9FcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUSxHQUFHO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjLEVBQUUsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVMsUUFBUSxhQUFhO0lBQ2pFLGdCQUFnQixFQUFFLENBQUMsV0FBZ0IsRUFBRSxFQUFPLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxLQUFLLEVBQUUsa0JBQWtCO0lBQ3hGLGNBQWMsRUFBRSxDQUFDLFdBQWdCLEVBQUUsRUFBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFdBQVcsS0FBSyxFQUFFLHFCQUFxQjtJQUN6RixjQUFjLEVBQUUsQ0FBQyxXQUFnQixFQUFFLEVBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxXQUFXLEtBQUssRUFBRSxxQkFBcUI7SUFDekYsdUJBQXVCLEVBQUUsQ0FBQyxLQUFVLEVBQUUsUUFBYSxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyx5QkFBeUIsUUFBUSxFQUFFO0lBRW5ILGtCQUFrQjtJQUNsQixjQUFjLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBTyxFQUFFLFFBQWEsRUFBRSxFQUFFLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRSx3QkFBd0IsUUFBUSxHQUFHO0lBRXJILGtCQUFrQjtJQUNsQixxQkFBcUIsRUFDcEIsMkdBQTJHO0lBQzVHLGtCQUFrQixFQUFFLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsS0FBSyxHQUFHO0lBRW5FLGlCQUFpQjtJQUNqQixnQkFBZ0IsRUFBRSxDQUFDLFdBQWdCLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxzQkFBc0I7SUFDNUUsZUFBZSxFQUFFLENBQUMsV0FBZ0IsRUFBRSxNQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxJQUFJLE1BQU0sMkJBQTJCO0lBQ3ZHLFlBQVksRUFBRSxDQUFDLElBQVMsRUFBRSxRQUFhLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQ3pELGFBQWEsSUFBSSxhQUFhLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksUUFBUSxFQUFFO0NBQy9ELENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBcUIsV0FBWSxTQUFRLEtBQUs7SUFDN0MsWUFBbUIsR0FBVyxFQUFFLEdBQUcsSUFBMEI7UUFDNUQsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSTtZQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsY0FBYyxHQUFHLGtCQUFrQixDQUFDLENBQUM7UUFDcEYsTUFBTSxPQUFPLEdBQUcsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7T0FFRztJQUNJLElBQUksQ0FBUztJQUVwQjs7T0FFRztJQUNILElBQW9CLElBQUk7UUFDdkIsT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO0lBQ3JDLENBQUM7Q0FDRDtBQXBCRCw4QkFvQkMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBNZXNzYWdlcyA9IHtcblx0Ly8gTW9kdWxlLXJlbGF0ZWRcblx0RklMRV9OT1RfRk9VTkQ6IChmaWxlbmFtZTogYW55KSA9PiBgRmlsZSAnJHtmaWxlbmFtZX0nIG5vdCBmb3VuZGAsXG5cdE1PRFVMRV9OT1RfRk9VTkQ6IChjb25zdHJ1Y3RvcjogYW55LCBpZDogYW55KSA9PiBgJHtjb25zdHJ1Y3Rvcn0gJyR7aWR9JyBkb2VzIG5vdCBleGlzdGAsXG5cdEFMUkVBRFlfTE9BREVEOiAoY29uc3RydWN0b3I6IGFueSwgaWQ6IGFueSkgPT4gYCR7Y29uc3RydWN0b3J9ICcke2lkfScgaXMgYWxyZWFkeSBsb2FkZWRgLFxuXHROT1RfUkVMT0FEQUJMRTogKGNvbnN0cnVjdG9yOiBhbnksIGlkOiBhbnkpID0+IGAke2NvbnN0cnVjdG9yfSAnJHtpZH0nIGlzIG5vdCByZWxvYWRhYmxlYCxcblx0SU5WQUxJRF9DTEFTU19UT19IQU5ETEU6IChnaXZlbjogYW55LCBleHBlY3RlZDogYW55KSA9PiBgQ2xhc3MgdG8gaGFuZGxlICR7Z2l2ZW59IGlzIG5vdCBhIHN1YmNsYXNzIG9mICR7ZXhwZWN0ZWR9YCxcblxuXHQvLyBDb21tYW5kLXJlbGF0ZWRcblx0QUxJQVNfQ09ORkxJQ1Q6IChhbGlhczogYW55LCBpZDogYW55LCBjb25mbGljdDogYW55KSA9PiBgQWxpYXMgJyR7YWxpYXN9JyBvZiAnJHtpZH0nIGFscmVhZHkgZXhpc3RzIG9uICcke2NvbmZsaWN0fSdgLFxuXG5cdC8vIE9wdGlvbnMtcmVsYXRlZFxuXHRDT01NQU5EX1VUSUxfRVhQTElDSVQ6XG5cdFx0XCJUaGUgY29tbWFuZCBoYW5kbGVyIG9wdGlvbnMgYGhhbmRsZUVkaXRzYCBhbmQgYHN0b3JlTWVzc2FnZXNgIHJlcXVpcmUgdGhlIGBjb21tYW5kVXRpbGAgb3B0aW9uIHRvIGJlIHRydWVcIixcblx0VU5LTk9XTl9NQVRDSF9UWVBFOiAobWF0Y2g6IGFueSkgPT4gYFVua25vd24gbWF0Y2ggdHlwZSAnJHttYXRjaH0nYCxcblxuXHQvLyBHZW5lcmljIGVycm9yc1xuXHROT1RfSU5TVEFOVElBQkxFOiAoY29uc3RydWN0b3I6IGFueSkgPT4gYCR7Y29uc3RydWN0b3J9IGlzIG5vdCBpbnN0YW50aWFibGVgLFxuXHROT1RfSU1QTEVNRU5URUQ6IChjb25zdHJ1Y3RvcjogYW55LCBtZXRob2Q6IGFueSkgPT4gYCR7Y29uc3RydWN0b3J9IyR7bWV0aG9kfSBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWRgLFxuXHRJTlZBTElEX1RZUEU6IChuYW1lOiBhbnksIGV4cGVjdGVkOiBhbnksIHZvd2VsID0gZmFsc2UpID0+XG5cdFx0YFZhbHVlIG9mICcke25hbWV9JyB3YXMgbm90ICR7dm93ZWwgPyBcImFuXCIgOiBcImFcIn0gJHtleHBlY3RlZH1gXG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gZXJyb3IgZm9yIEFrYWlyby5cbiAqIEBwYXJhbSBrZXkgLSBFcnJvciBrZXkuXG4gKiBAcGFyYW0gYXJncyAtIEFyZ3VtZW50cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWthaXJvRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgLi4uYXJnczogKHN0cmluZyB8IGJvb2xlYW4pW10pIHtcblx0XHRpZiAoTWVzc2FnZXNba2V5XSA9PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBFcnJvciBrZXkgJyR7a2V5fScgZG9lcyBub3QgZXhpc3RgKTtcblx0XHRjb25zdCBtZXNzYWdlID0gdHlwZW9mIE1lc3NhZ2VzW2tleV0gPT09IFwiZnVuY3Rpb25cIiA/IE1lc3NhZ2VzW2tleV0oLi4uYXJncykgOiBNZXNzYWdlc1trZXldO1xuXG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0dGhpcy5jb2RlID0ga2V5O1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBlcnJvciBjb2RlLlxuXHQgKi9cblx0cHVibGljIGNvZGU6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGVycm9yIG5hbWUuXG5cdCAqL1xuXHRwdWJsaWMgb3ZlcnJpZGUgZ2V0IG5hbWUoKSB7XG5cdFx0cmV0dXJuIGBBa2Fpcm9FcnJvciBbJHt0aGlzLmNvZGV9XWA7XG5cdH1cbn1cbiJdfQ==